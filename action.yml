name: 'SOFA Setup Action'
description: 'Setup everything needed to build a SOFA plugin'
inputs:
  sofa_root:
    description: 'SOFA install directory'
    required: true
    default: '${{ github.workspace }}/sofa-install'
outputs:
  softrobots_root:
    description: "SoftRobots plugin root directory"
    value: ${{ steps.download-sofa.outputs.softrobots_root }}
  softrobotsinvers_root:
    description: "SoftRobots.Inverse plugin root directory"
    value: ${{ steps.download-sofa.outputs.softrobotsinverse_root }}
  cosserat_root:
    description: "Cosserat plugin root directory"
    value: ${{ steps.download-sofa.outputs.cosserat_root }}
  sofaglfw_root:
    description: "SofaGLFW plugin root directory"
    value: ${{ steps.download-sofa.outputs.sofaglfw_root }}

# Action code
runs:
  using: "composite"
  steps:
      - name: Download SOFA and plugins binaries
        id: download-sofa
        shell: bash
        run: |
          echo "----------------------------"
          ACTION_SOFA_ROOT=${{ inputs.sofa_root }}
          echo "ACTION_SOFA_ROOT=$ACTION_SOFA_ROOT"
          mkdir -p "${{ runner.temp }}/sofa_tmp/zip" "${{ runner.temp }}/sofa_tmp/binaries" $ACTION_SOFA_ROOT
          urlPrefix="https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=${{ matrix.sofa_branch }},CI_SCOPE=full"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            urlSuffix="artifact/MacOS/*zip*/MacOS.zip"
          else 
            urlSuffix="artifact/${{ runner.os }}/*zip*/${{ runner.os }}.zip"
          fi
          url="$urlPrefix/lastBuild/$urlSuffix"
          if ! curl --output /dev/null --silent --head --fail "$url"; then
            echo 'There is no artifact for "lastBuild". Falling back on "lastSuccessfulBuild".'
            url="$urlPrefix/lastSuccessfulBuild/$urlSuffix"
          fi
          echo "Getting SOFA from $url"
          curl --http1.0 --output "${{ runner.temp }}/sofa_tmp/${{ runner.os }}.zip" -L $url
          unzip -qq "${{ runner.temp }}"/sofa_tmp/${{ runner.os }}.zip -d "${{ runner.temp }}/sofa_tmp/zip"
          unzip -qq "${{ runner.temp }}"/sofa_tmp/zip/${{ runner.os }}/SOFA_*.zip -d "${{ runner.temp }}/sofa_tmp/binaries"
          $SUDO mv "${{ runner.temp }}"/sofa_tmp/binaries/SOFA_*/* $ACTION_SOFA_ROOT
          cp "$ACTION_SOFA_ROOT/share/sofa/icons"/* "$ACTION_SOFA_ROOT/share/sofa/"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            sed -i.backup "/Sofa.Qt/d" $ACTION_SOFA_ROOT/bin/plugin_list.conf
            sed -i.backup "/Sofa.Qt/d" $ACTION_SOFA_ROOT/bin/plugin_list.conf.default
          else
            sed -i.backup "/Sofa.Qt/d" $ACTION_SOFA_ROOT/lib/plugin_list.conf
            sed -i.backup "/Sofa.Qt/d" $ACTION_SOFA_ROOT/lib/plugin_list.conf.default
          fi
          
          echo "ACTION_SOFA_ROOT=$ACTION_SOFA_ROOT"
          ls -al $ACTION_SOFA_ROOT
          
          echo "----------------------------"
          echo "----------------------------"
          
          # SoftRobots
          echo "First, removing SoftRobots from SOFA binaries (if any)"
          rm -rf "$ACTION_SOFA_ROOT/plugins"/SoftRobots*
          rm -rf "$ACTION_SOFA_ROOT/bin"/SoftRobots*
          rm -rf "$ACTION_SOFA_ROOT/lib"/SoftRobots*
          
          SoftRobots_ROOT="$ACTION_SOFA_ROOT/plugins/SoftRobots"
          mkdir -p "${{ runner.temp }}/sr_tmp/zip" "${{ runner.temp }}/sr_tmp/binaries" "$SoftRobots_ROOT"
          url="https://github.com/SofaDefrost/SoftRobots/releases/download"
          url="${url}/release-${{ matrix.sofa_branch }}/SoftRobots_${{ matrix.sofa_branch }}_for-SOFA-${{ matrix.sofa_branch }}_${{ runner.os }}.zip"
          echo "Getting SoftRobots from $url"
          curl --output "${{ runner.temp }}/sr_tmp/SoftRobots.zip" -L $url
          unzip -qq "${{ runner.temp }}/sr_tmp/SoftRobots.zip" -d "${{ runner.temp }}/sr_tmp/binaries"
          mv "${{ runner.temp }}"/sr_tmp/binaries/SoftRobots_*/* "$SoftRobots_ROOT"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "$SoftRobots_ROOT/bin"/* "$ACTION_SOFA_ROOT/bin/"
          fi
          echo "softrobots_root=$SoftRobots_ROOT" >> "$GITHUB_OUTPUT"
          
          echo "SoftRobots_ROOT=$SoftRobots_ROOT"
          ls -al $SoftRobots_ROOT

          echo "----------------------------"
          echo "----------------------------"

          # SoftRobots.Inverse
          echo "First, removing SoftRobots.Inverse from SOFA binaries (if any)"
          rm -rf "$ACTION_SOFA_ROOT/plugins"/SoftRobots.Inverse*
          rm -rf "$ACTION_SOFA_ROOT/bin"/SoftRobots.Inverse*
          rm -rf "$ACTION_SOFA_ROOT/lib"/SoftRobots.Inverse*
          
          SoftRobotsInverse_ROOT="$ACTION_SOFA_ROOT/plugins/SoftRobots.Inverse"
          mkdir -p "${{ runner.temp }}/sr_tmp/zip" "${{ runner.temp }}/sr_tmp/binaries" "$SoftRobotsInverse_ROOT"
          url="https://github.com/SofaDefrost/SoftRobots.Inverse/releases/download"
          url="${url}/release-main/SoftRobots.Inverse_main_for-SOFA-${{ matrix.sofa_branch }}_${{ runner.os }}.zip"
          echo "Getting SoftRobots.Inverse from $url"
          curl --output "${{ runner.temp }}/sr_tmp/zip/SoftRobots.Inverse.zip" -L $url
          unzip -qq "${{ runner.temp }}/sr_tmp/zip/SoftRobots.Inverse.zip" -d "${{ runner.temp }}/sr_tmp/binaries"
          mv "${{ runner.temp }}"/sr_tmp/binaries/SoftRobots.Inverse_*/* "$SoftRobotsInverse_ROOT"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "$SoftRobotsInverse_ROOT/bin"/* "$ACTION_SOFA_ROOT/bin/"
          fi
          echo "softrobotsinverse_root=$SoftRobotsInverse_ROOT" >> "$GITHUB_OUTPUT"
          
          echo "SoftRobotsInverse_ROOT=$SoftRobotsInverse_ROOT"
          ls -al $SoftRobotsInverse_ROOT

          echo "----------------------------"
          echo "----------------------------"

          # Cosserat
          echo "First, removing Cosserat from SOFA binaries (if any)"
          rm -rf "$ACTION_SOFA_ROOT/plugins"/Cosserat*
          rm -rf "$ACTION_SOFA_ROOT/bin"/Cosserat*
          rm -rf "$ACTION_SOFA_ROOT/lib"/Cosserat*
          
          Cosserat_ROOT="$ACTION_SOFA_ROOT/plugins/Cosserat"
          mkdir -p "${{ runner.temp }}/cosserat_tmp/zip" "${{ runner.temp }}/cosserat_tmp/binaries" "$Cosserat_ROOT"
          url="https://github.com/SofaDefrost/Cosserat/releases/download"
          url="${url}/release-${{ matrix.sofa_branch }}/Cosserat_${{ matrix.sofa_branch }}_for-SOFA-${{ matrix.sofa_branch }}_${{ runner.os }}.zip"
          echo "Getting Cosserat from $url"
          curl --output "${{ runner.temp }}/cosserat_tmp/zip/Cosserat.zip" -L $url
          unzip -qq "${{ runner.temp }}/cosserat_tmp/zip/Cosserat.zip" -d "${{ runner.temp }}/cosserat_tmp/binaries"
          mv "${{ runner.temp }}"/cosserat_tmp/binaries/Cosserat_*/* "$Cosserat_ROOT"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "$Cosserat_ROOT/bin"/* "$ACTION_SOFA_ROOT/bin/"
          fi
          echo "cosserat_root=$Cosserat_ROOT" >> "$GITHUB_OUTPUT"

          echo "Cosserat_ROOT=$Cosserat_ROOT"
          ls -al $Cosserat_ROOT

          echo "----------------------------"
          echo "----------------------------"

          # SofaGLFW & SofaImGui
          echo "First, removing SofaGLFW and SofaImGui from SOFA binaries (if any)"
          rm -rf "$ACTION_SOFA_ROOT/plugins"/SofaGLFW*
          rm -rf "$ACTION_SOFA_ROOT/bin"/SofaGLFW*
          rm -rf "$ACTION_SOFA_ROOT/lib"/SofaGLFW*
          rm -rf "$ACTION_SOFA_ROOT/plugins"/SofaImGui*
          rm -rf "$ACTION_SOFA_ROOT/bin"/SofaImGui*
          rm -rf "$ACTION_SOFA_ROOT/lib"/SofaImGui*
          
          SofaGLFW_ROOT="$ACTION_SOFA_ROOT/plugins/SofaGLFW"
          mkdir -p "${{ runner.temp }}/glfw_tmp/zip" "${{ runner.temp }}/glfw_tmp/binaries" "$SofaGLFW_ROOT"
          url="https://github.com/SofaComplianceRobotics/SofaGLFW/releases/download"
          url="${url}/release-robotics-with-imgui/SofaGLFW_robotics_with_imgui_for-SOFA-${{ matrix.sofa_branch }}_${{ runner.os }}.zip"
          echo "Getting SofaGLFW and SofaImGui from $url"
          curl --output "${{ runner.temp }}/glfw_tmp/zip/SofaGLFW.zip" -L $url
          unzip -qq "${{ runner.temp }}/glfw_tmp/zip/SofaGLFW.zip" -d "${{ runner.temp }}/glfw_tmp/binaries"
          mv "${{ runner.temp }}"/glfw_tmp/binaries/SofaGLFW_*/* "$SofaGLFW_ROOT"
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "$SofaGLFW_ROOT/bin"/* "$ACTION_SOFA_ROOT/bin/"
          fi

          echo "sofaglfw_root=$SofaGLFW_ROOT" >> "$GITHUB_OUTPUT"
          
          echo "SofaGLFW_ROOT=$SofaGLFW_ROOT"
          ls -al $SofaGLFW_ROOT
          
          echo "----------------------------"
          cd ${GITHUB_WORKSPACE}

      - name: Move python packages
        shell: bash
        run: |
          ACTION_SOFA_ROOT=${{ inputs.sofa_root }}
          echo "ACTION_SOFA_ROOT=$ACTION_SOFA_ROOT"
          ls -al $ACTION_SOFA_ROOT
          cd $ACTION_SOFA_ROOT/plugins

          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # Copy packages
            find ./ -type f |  sed -n 's|\(.*python3/site-packages\).*|\1|p' | uniq | grep -v '.*SofaPython3.*' | while IFS= read -r line; do
                cp -R ${line}/* ./SofaPython3/lib/python3/site-packages
                rm -rf ${line}
            done
          else
            # Copy packages
            find ./ -type f |  sed -n 's|\(.*python3/site-packages\).*|\1|p' | uniq | grep -v '.*SofaPython3.*' | while IFS= read -r line; do
                cp -r --preserve=links ${line}/* ./SofaPython3/lib/python3/site-packages
                rm -rf ${line}
            done
          fi

          cd ${GITHUB_WORKSPACE}
